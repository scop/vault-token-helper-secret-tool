#!/bin/sh
set -eu

# Copyright 2020 Ville SkyttÃ¤
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Specification: https://www.hashicorp.com/blog/building-a-vault-token-helper/

vault_id=default
case $0 in
	*vault-token-helper-secret-tool-*)
		vault_id=${0##*vault-token-helper-secret-tool-}
		;;
esac

attribute_values="vault $vault_id"
label="Vault $vault_id token"

store() {
	read -r token || :
	if test -z "$token"; then
		erase
		return
	fi
	# Assumes builtin printf; otherwise token observable from process list
	# shellcheck disable=SC2086
	printf "%s" "$token" |
		secret-tool store --label="$label" $attribute_values
}

erase() {
	# shellcheck disable=SC2086
	secret-tool clear $attribute_values
}

get() {
	set +e
	# shellcheck disable=SC2086
	token=$(secret-tool lookup $attribute_values)
	rc=$?
	test $rc -eq 1 -a -z "$token" && return 0
	printf %s "$token"
	return $rc
}

enable() {
	cd "$(dirname "$0")"
	script="$(pwd)/$(basename "$0")"
	helper_line="token_helper = \"$script\""
	conf=${VAULT_CONFIG_FILE:-~/.vault}
	if test -f "$conf" &&
		grep '^[[:space:]]*token_helper\>' "$conf"; then
		grep -qxF "$helper_line" "$conf" && return 0
		cat <<EOF
The above token_helper is already in $conf, replace manually if wanted:
$helper_line
EOF
		return 1
	fi
	printf "%s\n" "$helper_line" >>"$conf"
}

case ${1-} in
	store | erase | get | enable)
		$1
		;;
	*)
		printf "usage: %s {store | erase | get | enable}\n" "$0" >&2
		exit 2
		;;
esac
